Resources:
#  RateUpdate:
#    Type: "AWS::SQS::Queue"
#    Properties:
#      QueueName: "RateUpdate"
#  Trade:
#    Type: "AWS::SQS::Queue"
#    Properties:
#      QueueName: "Trade"

  #############
  #TRADE EVENT#
  #############
  # Create our SNS Topic
  tradeTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "Trade"

  # Create our 'storeTradeQueue' SQS queue
  storeTradeQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "StoreTrade"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt
          - storeTradeQueueDLQ
          - Arn
        maxReceiveCount: 3
  # Create our 'storeTradeQueue' Dead Letter Queue SQS queue
  storeTradeQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "StoreTradeDLQ"
  # Create our 'emailReceiptQueue' SQS queue
  emailReceiptQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "EmailReceipt"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt
          - emailReceiptQueueDLQ
          - Arn
        maxReceiveCount: 3
  # Create our 'emailReceiptQueue' Dead Letter Queue SQS queue
  emailReceiptQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "EmailReceiptDLQ"
  # Create our queue policy for the 'storeTradeQueue'
  snsToStoreTradeQueueSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "allow-sns-messages"
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt
              - storeTradeQueue
              - Arn
            Action: "SQS:SendMessage"
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref tradeTopic
      Queues:
        - Ref: storeTradeQueue
  # Create our queue policy for the 'emailReceiptQueue'
  snsToEmailReceiptQueueSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "allow-sns-messages"
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt
              - emailReceiptQueue
              - Arn
            Action: "SQS:SendMessage"
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref tradeTopic
      Queues:
        - Ref: emailReceiptQueue
  # Create the subscription to the 'storeTradeQueue'
  storeTradeQueueSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref tradeTopic
      Endpoint: !GetAtt
        - storeTradeQueue
        - Arn
      Protocol: sqs
      RawMessageDelivery: 'true'
  # Create the subscription to the 'emailReceiptQueue'
  emailReceiptQueueSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref tradeTopic
      Endpoint: !GetAtt
        - emailReceiptQueue
        - Arn
      Protocol: sqs
      RawMessageDelivery: 'true'

  ###################
  #RATE UPDATE EVENT#
  ###################
  # Create our SNS Topic
  rateUpdateTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "RateUpdate"

  # Create our 'storeRateQueue' SQS queue
  storeRateQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "StoreRate"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt
          - storeRateQueueDLQ
          - Arn
        maxReceiveCount: 3
  # Create our 'storeRateQueue' Dead Letter Queue SQS queue
  storeRateQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "StoreRateDLQ"
  # Create our 'initiateTradeQueue' SQS queue
  initiateTradeQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: "InitiateTrade"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt
          - initiateTradeQueueDLQ
          - Arn
        maxReceiveCount: 3
  # Create our 'initiateTradeQueue' Dead Letter Queue SQS queue
  initiateTradeQueueDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "InitiateTradeDLQ"
  # Create our queue policy for the 'storeRateQueue'
  snsToStoreRateQueueSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "allow-sns-messages"
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt
              - storeRateQueue
              - Arn
            Action: "SQS:SendMessage"
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref rateUpdateTopic
      Queues:
        - Ref: storeRateQueue
  # Create our queue policy for the 'initiateTradeQueue'
  snsToInitiateTradeQueueSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "allow-sns-messages"
            Effect: Allow
            Principal: "*"
            Resource: !GetAtt
              - initiateTradeQueue
              - Arn
            Action: "SQS:SendMessage"
            Condition:
              ArnEquals:
                "aws:SourceArn": !Ref rateUpdateTopic
      Queues:
        - Ref: initiateTradeQueue
  # Create the subscription to the 'storeRateQueue'
  storeRateQueueSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref rateUpdateTopic
      Endpoint: !GetAtt
        - storeRateQueue
        - Arn
      Protocol: sqs
      RawMessageDelivery: 'true'
  # Create the subscription to the 'initiateTradeQueue'
  initiateTradeQueueSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      TopicArn: !Ref rateUpdateTopic
      Endpoint: !GetAtt
        - initiateTradeQueue
        - Arn
      Protocol: sqs
      RawMessageDelivery: 'true'