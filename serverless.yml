service: kripto

custom:
  secrets: ${file(secrets.json)}

provider:
  name: aws
  stage: prod
  profile: kripto
  region: eu-west-1
  logRetentionInDays: 14
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - "sns:Publish"
      Resource:
        - "arn:aws:sns:${self:provider.region}:${self:custom.secrets.awsAccountId}:Trade"
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource:
        - "arn:aws:sqs:${self:provider.region}:${self:custom.secrets.awsAccountId}:RateUpdate"
        - "arn:aws:sqs:${self:provider.region}:${self:custom.secrets.awsAccountId}:Trade"
    - Effect: "Allow"
      Action:
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${self:provider.region}:${self:custom.secrets.awsAccountId}:*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
  environment:
    TOKEN: ${self:custom.secrets.token}
    REGION: ${self:provider.region}
    AWS_ACCOUNT_ID: ${self:custom.secrets.awsAccountId}
    LUMIGO_TRACER_TOKEN: ${self:custom.secrets.lumigoToken}

resources:
  - ${file(serverless/resources.yml)}

package:
  individually: true
  exclude:
    - /**
  include:
    - services/data-storer/bin/**
    - services/trader/bin/**
    - services/rate-retriever/**

functions:
  data-reader:
    runtime: go1.x
    memorySize: 128
    handler: services/data-storer/bin/data-reader
    environment:
      MONGO_URI: ${self:custom.secrets.mongoUri}
  rate-writer:
    runtime: go1.x
    memorySize: 128
    handler: services/data-storer/bin/rate-writer
    environment:
      MONGO_URI: ${self:custom.secrets.mongoUri}
    reservedConcurrency: 1
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - RateUpdate
              - Arn
  trade-writer:
    runtime: go1.x
    memorySize: 128
    handler: services/data-storer/bin/trade-writer
    environment:
      MONGO_URI: ${self:custom.secrets.mongoUri}
    reservedConcurrency: 1
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - storeTradeQueue
              - Arn
  rate-retriever:
    runtime: nodejs12.x
    memorySize: 128
    handler: services/rate-retriever.handler
    environment:
      QUEUE_URL: "https://sqs.${self:provider.region}.amazonaws.com/${self:custom.secrets.awsAccountId}/RateUpdate"
      COINBASE_API_KEY: ${self:custom.secrets.coinbaseApiKey}
      COINBASE_SECRET_KEY: ${self:custom.secrets.coinbaseSecretKey}
    events:
      - schedule: rate(1 minute)
  trade:
    runtime: go1.x
    memorySize: 128
    handler: services/trader/bin/trade
    environment:
      TOPIC: "arn:aws:sns:${self:provider.region}:${self:custom.secrets.awsAccountId}:Trade"
      COINBASE_PRO_KEY: ${self:custom.secrets.coinbaseProApiKey}
      COINBASE_PRO_PASSPHRASE: ${self:custom.secrets.coinbaseProPassphrase}
      COINBASE_PRO_SECRET: ${self:custom.secrets.coinbaseProSecretKey}
      COINBASE_PRO_SANDBOX_KEY: ${self:custom.secrets.coinbaseProSandboxApiKey}
      COINBASE_PRO_SANDBOX_PASSPHRASE: ${self:custom.secrets.coinbaseProSandboxPassphrase}
      COINBASE_PRO_SANDBOX_SECRET: ${self:custom.secrets.coinbaseProSandboxSecretKey}
      MOCK_TRADE: true
      TRADE_AMOUNT: 10.00
  trade-decider:
    runtime: python3.8
    memorySize: 128
    module: services/trade-decider
    handler: app.handler

plugins:
  - serverless-python-requirements
