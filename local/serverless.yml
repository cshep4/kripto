service: kripto

plugins:
  - serverless-localstack

custom:
  localstack:
    debug: true
    stages:
      # list of stages for which the plugin should be enabled
      - local
    host: http://localhost  # optional - LocalStack host to connect to
    autostart: true  # optional - start LocalStack in Docker on Serverless deploy
    endpoints:
      # This section is optional - can be used for customizing the target endpoints
      S3: http://localhost:4572
      DynamoDB: http://localhost:4569
      CloudFormation: http://localhost:4581
      Elasticsearch: http://localhost:4571
      ES: http://localhost:4578
      SNS: http://localhost:4575
      SQS: http://localhost:4576
      Lambda: http://localhost:4574
      Kinesis: http://localhost:4568
    lambda:
      # Enable this flag to improve performance
      mountCode: True
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False
  secrets: ${file(secrets.json)}

provider:
  name: aws
  stage: local
  region: us-east-1
  logRetentionInDays: 14
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
        - "sqs:GetQueueUrl"
      Resource: "arn:aws:sqs:${self:provider.region}:${self:custom.secrets.awsAccountId}:RateUpdate"
    - Effect: "Allow"
      Action:
        - "sqs:ListQueues"
      Resource: "arn:aws:sqs:${self:provider.region}:${self:custom.secrets.awsAccountId}:*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
  environment:
    MONGO_URI: ${self:custom.secrets.mongoUri}
    TOKEN: ${self:custom.secrets.token}
    REGION: ${self:provider.region}
    AWS_ACCOUNT_ID: ${self:custom.secrets.awsAccountId}
    LUMIGO_TOKEN: ${self:custom.secrets.lumigoToken}

package:
  exclude:
    - ../**
  include:
    - ../services/data-storer/bin/**
    - ../services/rate-retriever/**

functions:
  read-data:
    runtime: go1.x
    memorySize: 128
    handler: ../services/data-storer/bin/read
    events:
      - http:
          path: /data
          resp: http
          method: get
          cors: true
  write-data:
    runtime: go1.x
    memorySize: 128
    handler: ../services/data-storer/bin/write
    events:
      - http:
          path: /data
          resp: http
          method: post
          cors: true
  rate-writer:
    runtime: go1.x
    memorySize: 128
    handler: ../services/data-storer/bin/rate-writer
    reservedConcurrency: 1
    events:
      - sqs:
          batchSize: 1
          arn:
            Fn::GetAtt:
              - RateUpdate
              - Arn
  rate-retriever:
    runtime: nodejs12.x
    memorySize: 128
    handler: ../services/rate-retriever.handler
    environment:
      QUEUE_URL: "http://localhost:4576/${self:custom.secrets.awsAccountId}/RateUpdate"
      COINBASE_API_KEY: ${self:custom.secrets.coinbaseApiKey}
      COINBASE_SECRET_KEY: ${self:custom.secrets.coinbaseSecretKey}
    events:
      - schedule: rate(1 minute)

resources:
  Resources:
    RateUpdate:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "RateUpdate"